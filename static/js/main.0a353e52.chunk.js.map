{"version":3,"sources":["components/task.module.css","components/task-reducer.js","img/closeCross.svg","img/pencil.svg","components/Task.jsx","components/todolist.jsx","components/todolistContainer.jsx","App.js","reportWebVitals.js","components/redux-store.js","index.js","components/todolist.module.css"],"names":["module","exports","ADD_TASK","REMOVE_TASK","COMPLET_TASK","CHECKED_TASK","EDIT_MODE","SET_CHENGES","SET_EDIT_TASK_ID","ONLY_ACTIVE_MODE","initialState","tasks","id","message","checked","showOnlychecked","showOnlyActive","editModeInfo","editMode","idEditTask","taskReducer","state","action","type","taskItem","Math","random","newTask","filter","item","map","task","Task","props","className","classes","taskWrap","onClick","e","target","editTarget","complet","check","trough","edit","onEditMode","src","pencil","alt","imgWrap","removeTask","cross","ToDo","useState","chengeTask","currentTarget","attributes","value","setEditTaskId","editTask","chengeEditMode","mapTasks","mainWrapper","inputWrapper","onChange","maxLength","placeholder","length","setChenges","saveTask","taskWrapper","footer","viewChecked","viewActive","TodolistContainer","connect","taskPage","dispatch","removeTaskAC","completAC","setChengesAC","setEditTaskIdAC","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a353e52.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskWrap\":\"task_taskWrap__367sq\",\"message\":\"task_message__2CkUQ\",\"check\":\"task_check__2usCm\",\"imgWrap\":\"task_imgWrap__dq8WN\",\"checked\":\"task_checked__2SfDB\",\"trough\":\"task_trough__XirDl\",\"edit\":\"task_edit__2Oc1a\",\"editTarget\":\"task_editTarget__37Nam\"};","const ADD_TASK = 'ADD_TASK'\r\nconst REMOVE_TASK = 'REMOVE_TASK'\r\nconst COMPLET_TASK = 'COMPLET_TASK'\r\nconst CHECKED_TASK = 'CHECKED_TASK'\r\nconst EDIT_MODE = 'EDIT_MODE'\r\nconst SET_CHENGES = 'SET_CHENGES'\r\nconst SET_EDIT_TASK_ID = 'SET_EDIT_TASK_ID'\r\nconst ONLY_ACTIVE_MODE = 'ONLY_ACTIVE_MODE'\r\n\r\nlet initialState = {\r\n\r\n   tasks: [ {id: 17856868, message: 'add task', checked: false, } ],\r\n   showOnlychecked: false,\r\n   showOnlyActive: false,\r\n   editModeInfo: {editMode: false, idEditTask: 0}\r\n}\r\n\r\n\r\n\r\n\r\nconst taskReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TASK:\r\n            let taskItem = {\r\n                id:Math.random(),\r\n                message: action.newTask,\r\n                checked: false\r\n            }\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, taskItem]\r\n            }\r\n            /* stateCopy.tasks.push(taskItem)\r\n            return stateCopy */\r\n            case REMOVE_TASK:\r\n                return {\r\n                    ...state,\r\n                    tasks: state.tasks.filter(item => item.id !== action.id)\r\n                }\r\n            case COMPLET_TASK:\r\n                return {\r\n                    ...state,\r\n                    tasks: state.tasks.map(task => {\r\n                        if(task.id === action.id) {\r\n                            if(task.checked) {\r\n                                return {\r\n                                    ...task,\r\n                                    checked: false\r\n                                }\r\n                            } else {\r\n                                return {\r\n                                    ...task,\r\n                                    checked: true\r\n                                }\r\n                            }\r\n                        }\r\n                        return task\r\n                    })\r\n                }\r\n            case CHECKED_TASK:\r\n                return {\r\n                    ...state,\r\n                    showOnlychecked: state.showOnlychecked ? false : true\r\n                    }\r\n            case ONLY_ACTIVE_MODE:\r\n                    return {\r\n                    ...state,\r\n                    showOnlyActive: state.showOnlyActive ? false : true\r\n                            }          \r\n            case EDIT_MODE:\r\n                return {\r\n                    ...state,\r\n                    editModeInfo: {...state.editModeInfo, \r\n                    editMode: state.editModeInfo.editMode ? false : true}\r\n                            }\r\n            case SET_EDIT_TASK_ID:\r\n                return {\r\n                    ...state,\r\n                    editModeInfo: {...state.editModeInfo, \r\n                        idEditTask: action.id}\r\n                         }                  \r\n            case SET_CHENGES:\r\n                return {\r\n                    ...state,\r\n                    tasks: state.tasks.map(task => {\r\n                        if(task.id === state.editModeInfo.idEditTask) {\r\n                                return {\r\n                                    ...task,\r\n                                    message: action.message\r\n                                }\r\n                            }\r\n                            return task\r\n                        }) \r\n                }                                \r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (newTask) => {\r\n    return {\r\n        type: ADD_TASK,\r\n        newTask\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (id) => {\r\n    return {\r\n        type: REMOVE_TASK,\r\n        id\r\n    }\r\n}\r\n\r\nexport const completAC = (id) => {\r\n    return {\r\n        type: COMPLET_TASK,\r\n        id\r\n    }\r\n}\r\n\r\nexport const checkedTaskAC = () => {\r\n    return {\r\n        type: CHECKED_TASK\r\n    }\r\n}\r\n\r\nexport const showOnlyActiveAC = () => {\r\n    return {\r\n        type: ONLY_ACTIVE_MODE\r\n    }\r\n}\r\n\r\nexport const editModeAC = () => {\r\n    return {\r\n        type: EDIT_MODE\r\n    }\r\n}\r\n\r\nexport const setChengesAC = (message) => {\r\n    return {\r\n        type: SET_CHENGES,\r\n        message\r\n    }\r\n}\r\n\r\nexport const setEditTaskIdAC = (id) => {\r\n    return {\r\n        type: SET_EDIT_TASK_ID,\r\n        id\r\n    }\r\n}\r\n\r\nexport default taskReducer","export default __webpack_public_path__ + \"static/media/closeCross.386c62bb.svg\";","export default __webpack_public_path__ + \"static/media/pencil.bc0f063e.svg\";","import classes from './task.module.css'\r\nimport cross from './../img/closeCross.svg'\r\nimport pencil from './../img/pencil.svg'\r\n\r\n\r\nconst Task = (props) => {\r\n\r\n    return (\r\n        <div className={`${classes.taskWrap} ${props.checked && classes.checked}`}\r\n            id={props.id} onClick={(e) => \r\n            { e.target.className !== classes.editTarget &&\r\n                props.complet(e) }}>\r\n            <div>\r\n                <span className={classes.check}>{props.checked && <span></span>}</span>\r\n                <div className={`${classes.message} ${props.checked && classes.trough}`}>\r\n                    {props.message}</div>\r\n                <span className={classes.edit} onClick={(e) => {\r\n                    props.onEditMode(e)\r\n                }}  id={props.id}><img src={pencil} alt='pencil' className={classes.editTarget}></img></span>    \r\n            </div>\r\n            <div className={classes.imgWrap}>\r\n                <img onClick={(e) => {\r\n                    props.removeTask(e)\r\n                }} src={cross} id={props.id} alt='close' />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task","import React, { useState } from 'react'\r\nimport Task from './Task'\r\nimport classes from './todolist.module.css'\r\n\r\nconst ToDo = (props) => {\r\n    \r\n    const [task, chengeTask] = useState('')\r\n    \r\n\r\n    const onChenge = (e) => {\r\n        chengeTask(e.currentTarget.value)\r\n    }\r\n\r\n    const onEditMode = (e) => {\r\n        let id = +e.currentTarget.attributes.id.value\r\n        props.setEditTaskId(id)\r\n        let editTask = props.tasks.filter(task => task.id === id)\r\n        chengeTask(editTask[0].message)\r\n        props.chengeEditMode ()\r\n    }\r\n\r\n    const saveChenges = () => {\r\n        props.chengeEditMode ()\r\n        props.setChenges(task)\r\n        chengeTask('')\r\n    }\r\n\r\n    const mapTasks = (task) => {\r\n        return <Task key={task.id} id={task.id}\r\n        message={task.message}\r\n        checked={task.checked}\r\n        removeTask={props.removeTask} \r\n        complet={props.complet}\r\n        editMode={props.editMode}\r\n        onEditMode={onEditMode}/>\r\n    }\r\n\r\n    const filtrTasks = () => {\r\n        if (props.showOnlychecked) {\r\n          return props.tasks.filter(task => task.checked)\r\n                .map( task => mapTasks (task))\r\n        } else if (props.showOnlyActive) {\r\n           return props.tasks.filter(task => !task.checked)\r\n            \t.map( task => mapTasks (task))\r\n        } else {\r\n           return props.tasks\r\n                .map(task => mapTasks (task))\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.mainWrapper}>\r\n            <div className={classes.inputWrapper}>\r\n                <h3>My To Do List</h3>\r\n                <input type='input' value={task} onChange={onChenge}  maxLength=\"30\"\r\n                placeholder={props.tasks.length > 1 ? 'I want more tasks' : 'give me your tasks'}></input>\r\n                {!props.editMode ? <button onClick={()=> {\r\n                    props.saveTask(task)\r\n                    chengeTask('')\r\n                }}>Add</button> :\r\n                <button onClick={()=> {\r\n                   saveChenges ()\r\n                }}>Save</button> }\r\n            </div>\r\n\r\n            <div className={classes.taskWrapper}>\r\n            { filtrTasks ()\r\n            /* props.showOnlychecked ? props.tasks.filter(task => task.checked)\r\n            \t.map( task => mapTasks (task))\r\n            \t : props.tasks\r\n                .map(task => mapTasks (task)) */\r\n            }\r\n            </div> \r\n\r\n            <div className={classes.footer}>\r\n            <button onClick={props.viewChecked} >{props.showOnlychecked ? 'Show all task' : 'Completed'}</button>  \r\n            <button onClick={props.viewActive} >{props.showOnlyActive ? 'Show all task' : 'Active'}</button>  \r\n\r\n            </div>\r\n             \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDo","import { addTaskAC, checkedTaskAC, removeTaskAC, editModeAC, setChengesAC, setEditTaskIdAC, completAC, showOnlyActiveAC } from './task-reducer'\r\nimport {connect} from 'react-redux'\r\nimport ToDo from './todolist'\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.taskPage.tasks,\r\n        showOnlychecked: state.taskPage.showOnlychecked,\r\n        editMode: state.taskPage.editModeInfo.editMode,\r\n        idEditTask: state.taskPage.editModeInfo.idEditTask,\r\n        showOnlyActive: state.taskPage.showOnlyActive\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        saveTask: (task) => {\r\n            dispatch(addTaskAC(task))\r\n        },\r\n\r\n        removeTask: (e) => {\r\n            const id = e.currentTarget.attributes.id.value\r\n            dispatch(removeTaskAC(+id))\r\n        },\r\n\r\n        complet: (e) => {\r\n            const id = e.currentTarget.attributes.id.value\r\n            dispatch(completAC(+id))\r\n        },\r\n\r\n        viewChecked: () => {\r\n            dispatch(checkedTaskAC())\r\n        },\r\n\r\n        viewActive: () => {\r\n            dispatch(showOnlyActiveAC())\r\n        },\r\n\r\n        chengeEditMode: () => {\r\n            dispatch(editModeAC())\r\n        },\r\n\r\n        setChenges: (id, message) => {\r\n            dispatch(setChengesAC(id, message))\r\n        },\r\n\r\n        setEditTaskId: (id) => {\r\n            dispatch (setEditTaskIdAC(id))\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst TodolistContainer = connect(mapStateToProps, mapDispatchToProps)(ToDo)\r\n\r\nexport default TodolistContainer","import './App.css';\nimport TodolistContainer from './components/todolistContainer';\n\nfunction App(props) {\n  return (\n    <div>\n      <TodolistContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from 'redux'\r\nimport taskReducer from './task-reducer'\r\n\r\nconst reducers = combineReducers ({\r\n taskPage: taskReducer\r\n})\r\n\r\n\r\n\r\nlet store = createStore(reducers)\r\n\r\nwindow.store = store\r\n\r\nexport default store\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './components/redux-store';\nimport { Provider } from 'react-redux';\n\n\n\n\nconst reranderEntireTree = () => {\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n}\n\nreranderEntireTree ();\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"todolist_inputWrapper__15szp\",\"mainWrapper\":\"todolist_mainWrapper__eDJRD\",\"taskWrapper\":\"todolist_taskWrapper__3zd3B\",\"footer\":\"todolist_footer__3zzyi\"};"],"sourceRoot":""}